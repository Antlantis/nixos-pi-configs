# Site-Specific Configuration Example
# Copy this to site-config.nix and customize for your deployment

{ config, lib, pkgs, ... }:

{
  # Kismet Configuration Override
  services.kismet-sensor = {
    # Specify which wireless interfaces to monitor
    interfaces = [
      # Monitor mode on wlan0 with channel hopping
      "wlan0:type=linuxwifi,hop=true,hop_channels=\"1,2,3,4,5,6,7,8,9,10,11\""

      # Monitor mode on wlan1 for 5GHz (if you have a second adapter)
      # "wlan1:type=linuxwifi,hop=true,hop_channels=\"36,40,44,48,52,56,60,64,100,104,108,112,116,120,124,128,132,136,140\""

      # RTL-SDR support (if you have RTL-SDR hardware)
      # "rtl433-0:type=rtl433,device=0"
    ];

    # GPS Configuration (if you have a GPS module)
    gps = {
      enable = true;
      host = "127.0.0.1";
      port = 2947;
    };

    # Web UI Credentials (CHANGE THESE!)
    httpd = {
      username = "admin";
      password = "your-secure-password-here";
    };

    # Additional Kismet configuration
    extraConfig = ''
      # Logging options
      log_types=kismet,pcapng,pcapng-stream,gpsxml

      # Keep logs for 30 days
      log_title=sensor-%Y-%m-%d-%H-%M-%S

      # Alert on common attacks
      alert=APSPOOF,1/min,5/min,0/min
      alert=CHANCHANGE,1/min,5/min,0/min
      alert=BCASTDISCON,1/min,5/min,0/min
      alert=AIRJACKSSID,1/min,5/min,0/min
      alert=PROBENOJOIN,1/min,5/min,0/min
      alert=DISCONCODEINVALID,1/min,5/min,0/min
      alert=MALFORMMGMT,1/min,5/min,0/min
      alert=LONGSSID,1/min,5/min,0/min

      # Performance tuning for Raspberry Pi
      packet_dedup_size=2048
      packet_backlog_warning=512
      packet_backlog_limit=1024

      # Track devices for 10 minutes
      tracker_device_timeout=600

      # Maximum devices to track (adjust based on your Pi's memory)
      tracker_max_devices=5000
    '';
  };

  # Additional system packages for your specific needs
  environment.systemPackages = with pkgs; [
    # Network analysis tools
    iperf3
    mtr
    dnsutils

    # Hardware monitoring
    lm_sensors
    usbutils

    # Development tools (if needed)
    # python3
    # nodejs

    # Custom monitoring scripts
    # (pkgs.writeScriptBin "monitor-status" ''
    #   #!/bin/sh
    #   echo "=== System Status ==="
    #   echo "Hostname: $(hostname)"
    #   echo "Uptime: $(uptime)"
    #   echo "=== Netbird Status ==="
    #   netbird status
    #   echo "=== Kismet Status ==="
    #   systemctl status kismet --no-pager
    # '')
  ];

  # Custom services or scripts
  # systemd.services.custom-monitor = {
  #   description = "Custom monitoring service";
  #   after = [ "network.target" ];
  #   wantedBy = [ "multi-user.target" ];
  #   serviceConfig = {
  #     Type = "simple";
  #     ExecStart = "${pkgs.bash}/bin/bash -c 'while true; do date; sleep 60; done'";
  #     Restart = "always";
  #   };
  # };

  # Network optimizations for wireless monitoring
  boot.kernel.sysctl = {
    # Increase network buffers for packet capture
    "net.core.rmem_max" = 134217728;
    "net.core.wmem_max" = 134217728;
    "net.core.netdev_max_backlog" = 5000;
    "net.ipv4.tcp_rmem" = "4096 87380 134217728";
    "net.ipv4.tcp_wmem" = "4096 65536 134217728";

    # Disable IPv6 if not needed (reduces overhead)
    # "net.ipv6.conf.all.disable_ipv6" = 1;
    # "net.ipv6.conf.default.disable_ipv6" = 1;
  };

  # Hardware-specific configuration for Raspberry Pi
  hardware.raspberry-pi."4" = {
    # Enable hardware watchdog
    # fkms-3d.enable = true;
  };

  # Automatic system maintenance
  nix.gc = {
    automatic = true;
    dates = "weekly";
    options = "--delete-older-than 7d";
  };

  # Log rotation to prevent filling up SD card
  services.logrotate = {
    enable = true;
    settings = {
      "/var/lib/kismet/logs/*.log" = {
        rotate = 7;
        weekly = true;
        compress = true;
        delaycompress = true;
        missingok = true;
        notifempty = true;
      };
    };
  };

  # Optional: Enable zram swap for better performance
  zramSwap = {
    enable = true;
    memoryPercent = 50;
  };

  # Optional: Enable additional monitoring
  services.prometheus-node-exporter = {
    enable = false;  # Set to true if you want metrics export
    port = 9100;
  };

  # Custom firewall rules for your network
  networking.firewall = {
    # Allow additional ports if needed
    # allowedTCPPorts = [ 8080 ];
    # allowedUDPPorts = [ 5353 ];  # mDNS

    # Trust specific interfaces
    # trustedInterfaces = [ "eth0" ];
  };

  # WiFi configuration (if using WiFi for management, not monitoring)
  # networking.wireless = {
  #   enable = true;
  #   networks = {
  #     "YourWiFiSSID" = {
  #       psk = "your-wifi-password";
  #     };
  #   };
  # };
}
